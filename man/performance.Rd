% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/EyeMetGen_Functions_alternative.R
\name{performance}
\alias{performance}
\title{performance}
\usage{
performance(model_fit_default, test_data, trg, sd = 2020)
}
\arguments{
\item{model_fit_default}{is the rand_forest function output}

\item{test_data}{is the test dataset}

\item{trg}{is the target (e.g.; sex)}

\item{sd}{is the seed}
}
\value{
dataframe
}
\description{
Performance and statistics
}
\details{
#' @title Preprocessing_recipes
#' @description Pre-Processing the data with{recipes}
#' @param tar.bact.trg is the sub dataset filtered by trg
#' @param q is the formula (e.g.; sex ~.)
#' @param sd is the seed
#' @export
#' @return dataframe
preprocessing_recipes <- function(tar.bact.trg, q, sd=2020) {

set.seed(sd)
rec <- recipe(q, 
              data = tar.bact.trg) %>%   # Formula
  step_dummy(all_nominal(), -trg) %>%          # convert nominal data into one or more numeric.
  step_corr(all_predictors()) %>%                 # remove variables that have large absolute 
  # correlations with other variables.
  step_center(all_numeric(), -all_outcomes())%>%  # normalize numeric data to have a mean of zero.
  step_scale(all_numeric(), -all_outcomes()) %>%        # normalize numeric data to have a standard deviation of one.
  step_naomit(all_predictors()) 
  # %>%step_downsample(trg)                    # all classes should have the same frequency as the minority 
# class(not needed in our case)

return(rec)
}
}
